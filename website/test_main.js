// Setting the dimensions
var width = 460
var height = 460

d3.json("https://raw.githubusercontent.com/dmilosch/dmilosch.github.io/refs/heads/main/network.json", function(data){

var force = d3.layout.force()
.nodes(data.nodes)
.links(data.links)
.size([width, height])
.linkDistance(90)
.charge(-300)
.on("tick", tick)
.start();

var svg = d3.select("body").append("svg:svg")
      .attr("width", w)
      .attr("height", h);
  
  // Per-type markers, as they don't inherit styles.
  svg.append("svg:defs").selectAll("marker")
      .data(["A", "B", "C"])
    .enter().append("svg:marker")
      .attr("id", String)
      .attr("viewBox", "0 -5 10 10")
      .attr("refX", 1.5)
      .attr("refY", -1.5)
      .attr("markerWidth", 6)
      .attr("markerHeight", 6)
      .attr("orient", "auto")
    .append("svg:path")
      .attr("d", "M0,-5L10,0L0,5");
  
  var path = svg.append("svg:g").selectAll("path.link")
      .data(force.links())
    .enter().append("svg:path")
      .attr("class", function(d) { return "link " + d.type; });
  
  var markerPath = svg.append("svg:g").selectAll("path.marker")
      .data(force.links())
    .enter().append("svg:path")
      .attr("class", function(d) { return "marker_only " + d.type; })
      .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });
  
  
  var circle = svg.append("svg:g").selectAll("circle")
      .data(force.nodes())
    .enter().append("svg:circle")
      .attr("r", 6)
      .call(force.drag);
  
  var text = svg.append("svg:g").selectAll("g")
      .data(force.nodes())
    .enter().append("svg:g");
  
  // A copy of the text with a thick white stroke for legibility.
  text.append("svg:text")
      .attr("x", 8)
      .attr("y", ".31em")
      .attr("class", "shadow")
      .text(function(d) { return d.name; });
  
  text.append("svg:text")
      .attr("x", 8)
      .attr("y", ".31em")
      .text(function(d) { return d.name; });
  
  // Use elliptical arc path segments to doubly-encode directionality.
  function tick() {
  
    path.attr("d", function(d) {
      var dx = d.target.x - d.source.x,
          dy = d.target.y - d.source.y,
          dr = Math.sqrt(dx * dx + dy * dy);
      return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
    });
      
    markerPath.attr("d", function(d) {
      var dx = d.target.x - d.source.x,
          dy = d.target.y - d.source.y,
          dr = Math.sqrt(dx * dx + dy * dy);
  
      // We know the center of the arc will be some distance perpendicular from the
      // link segment's midpoint. The midpoint is computed as:
      var endX = (d.target.x + d.source.x) / 2;
      var endY = (d.target.y + d.source.y) / 2;
  
      // Notice that the paths are the arcs generated by a circle whose 
      // radius is the same as the distance between the nodes. This simplifies the 
      // trig as we can simply apply the 30-60-90 triangle rule to find the difference
      // between the radius and the distance to the segment midpoint from the circle 
      // center.
      var len = dr - ((dr/2) * Math.sqrt(3));
      
      // Remember that is we have a line's slope then the perpendicular slope is the 
      // negative inverse.
      endX = endX + (dy * len/dr);
      endY = endY + (-dx * len/dr);
        
      return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + endX + "," + endY;
    });
  
    circle.attr("transform", function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
  
    text.attr("transform", function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
  }
})